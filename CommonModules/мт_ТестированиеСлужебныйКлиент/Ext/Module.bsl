///////////////////////////////////////////////////////////////////////////////////////////////////////
// (с) Tolkachev Pavel, 2020
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает ссылку на общий клиентский модуль.
//
// Параметры:
//  Имя - Строка - имя общего клиентского модуля.
//
// Возвращаемое значение:
//  Общий клиентский модуль.
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Возврат Вычислить(Имя);
	
КонецФункции

// Возвращает ссылка на модуль формы.
//
// Параметры:
//  ТипОбъекта - Строка - тип объекта ("ОбщаяФорма", "Справочник", "Отчет" и т.п.).
//  ИмяОбъекта - Строка - имя объекта ("ФормаВводаАдреса", "Номенклатура", "Продажи" и т.п.).
//  ИмяФормы - Строка - имя формы для объекта, имеющего несколько форм (справочник, документ и т.п.).
// 
// Возвращаемое значение:
//  Модуль формы.
//
// Примеры использования.
//	МодульОбщейФормы = МодульФормы("ОбщаяФорма", "ФормаВводаАдреса");
//	МодульФормыНоменклатуры = МодульФормы("Справочник", "Номенклатура", "ФормаЭлемента");
//
Функция МодульФормы(ТипОбъекта, ИмяОбъекта, ИмяФормы = Неопределено) Экспорт
	
	ПолноеИмяФормы = ТипОбъекта + "." + ИмяОбъекта + ?(ИмяФормы = Неопределено, "", ".Форма." + ИмяФормы);
	
	ПараметрыФормы = Новый Структура("АвтоТест", Истина);
	МодульФормы = ПолучитьФорму(ПолноеИмяФормы, ПараметрыФормы);
	
	Возврат МодульФормы;
	
КонецФункции 

// Начинает загрузку настроек тестирования из файла на диске. Если файл настроек отсутствует или при чтении настроек
// произошла ошибка, то будут установлены настройки по умолчанию.
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана после завершения
//                                               со следующими параметрами:
//    * Настройки - Структура - значения прочитанных настроек;
//    * ДопПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура НачатьЧтениеНастроек(ОповещениеОЗавершении) Экспорт
	
	ИмяФайлаНастроек = мт_ТестированиеСлужебныйКлиентПовтИсп.ПутьКФайлуНастроек();
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяФайлаНастроек", ИмяФайлаНастроек);
	ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПроверкаСуществованияФайлаНастроекЗавершение",
		мт_ТестированиеСлужебныйКлиент,
		ПараметрыОповещения);
		
		
	Файл = Новый Файл(ИмяФайлаНастроек);
	Файл.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

Процедура ПроверитьАвтозапускТестов() Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ПриНачалеРаботыСистемыЧтениеНастроекЗавершение",
		мт_ТестированиеСлужебныйКлиент);
	НачатьЧтениеНастроек(Оповещение);
	
КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ПроверкаСуществованияФайлаНастроекЗавершение(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		
		Попытка
			
			Настройки = мт_ТестированиеСлужебныйКлиентСервер.ПрочитатьДанныеИзJSON(ДопПараметры.ИмяФайлаНастроек);
			
		Исключение
			
			СообщениеЖурналаРегистрации = НСтр("ru='Ошибка при чтении настроек:'") + Символы.ПС +
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			мт_ТестированиеСлужебныйВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурналаРегистрации);
			
			Настройки = мт_ТестированиеСлужебныйКлиентПовтИсп.НастройкиПоУмолчанию();
			
		КонецПопытки; 
		
	Иначе
		
		Настройки = мт_ТестированиеСлужебныйКлиентПовтИсп.НастройкиПоУмолчанию();
		
	КонецЕсли; 
	
	ВыполнитьОбработкуОповещения(ДопПараметры.ОповещениеОЗавершении, Настройки);
	
КонецПроцедуры 

Процедура ПриНачалеРаботыСистемыЧтениеНастроекЗавершение(Настройки, ДопПараметры) Экспорт
	
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Настройки.АвтоматическийЗапускПриНачалеРаботы
			И мт_ТестированиеСлужебныйВызовСервера.ЭтоПользовательДляАвтозапускаТестов(
				Настройки.ПользовательДляАвтоЗапускаТестов)
	Тогда
	
		ПараметрыФормы = Новый Структура("Автозапуск", Истина);
		ОткрытьФорму("Обработка.мт_МодульноеТестирование.Форма", ПараметрыФормы);
	
	КонецЕсли; 
	
КонецПроцедуры 

#КонецОбласти 